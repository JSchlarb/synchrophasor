package synchrophasor

import (
	"strings"
	"testing"
	"time"

	"github.com/stretchr/testify/require"
)

func TestHeaderFrame(t *testing.T) {
	soc := uint32(time.Unix(1149591600, 0).Unix())
	hf := NewHeaderFrame(7734, "Hello I'm Header Frame.")
	hf.SetTimeWithQuality(soc, 770000, "+", false, false, 15)

	hfBytes, err := hf.Pack()
	require.NoError(t, err)

	expectedBytes := []byte{
		0xaa, 0x11, 0x00, 0x27, 0x1e, 0x36, 0x44, 0x85, 0x60, 0x30, 0x0f, 0x0b, 0xbf, 0xd0, 0x48, 0x65, 0x6c, 0x6c,
		0x6f, 0x20, 0x49, 0x27, 0x6d, 0x20, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x20, 0x46, 0x72, 0x61, 0x6d, 0x65,
		0x2e, 0x17, 0xcc,
	}
	require.Equal(t, expectedBytes, hfBytes)
}

func TestCommonFrame(t *testing.T) {

	cf := NewCommandFrame()
	cf.IDCode = 7734
	cf.CMD = CmdStart
	cf.SOC = 1149591600
	soc := uint32(time.Unix(1149591600, 0).Unix())
	cf.SetTimeWithQuality(soc, 770000, "+", false, false, 15)

	cfBytes, err := cf.Pack()
	require.NoError(t, err)
	expectedBytes := []byte{
		0xaa, 0x41, 0x00, 0x12, 0x1e, 0x36, 0x44, 0x85, 0x60, 0x30, 0x0f, 0x0b, 0xbf, 0xd0, 0x00, 0x02, 0xce, 0x00,
	}
	require.Equal(t, expectedBytes, cfBytes)
}

func TestConfigFrame2(t *testing.T) {
	cfg := NewConfigFrame()
	cfg.IDCode = 7734
	cfg.TimeBase = 1000000
	cfg.DataRate = 30

	soc := uint32(1149577200)
	cfg.SetTimeWithQuality(soc, 463000, "-", false, true, 6)
	station := NewPMUStation("Station A", 7734, false, true, false, false)

	station.AddPhasor("VA", 915527, PhunitVoltage)
	station.AddPhasor("VB", 915527, PhunitVoltage)
	station.AddPhasor("VC", 915527, PhunitVoltage)
	station.AddPhasor("I1", 45776, PhunitCurrent)

	station.AddAnalog("ANALOG1", 1, AnunitPow)
	station.AddAnalog("ANALOG2", 1, AnunitRMS)
	station.AddAnalog("ANALOG3", 1, AnunitPeak)

	digitalNames := []string{
		"BREAKER 1 STATUS", "BREAKER 2 STATUS", "BREAKER 3 STATUS", "BREAKER 4 STATUS",
		"BREAKER 5 STATUS", "BREAKER 6 STATUS", "BREAKER 7 STATUS", "BREAKER 8 STATUS",
		"BREAKER 9 STATUS", "BREAKER A STATUS", "BREAKER B STATUS", "BREAKER C STATUS",
		"BREAKER D STATUS", "BREAKER E STATUS", "BREAKER F STATUS", "BREAKER G STATUS",
	}
	station.AddDigital(digitalNames, 0x0000, 0xFFFF)

	station.Fnom = FreqNom60Hz
	station.CfgCnt = 22

	cfg.AddPMUStation(station)

	cfgBytes, err := cfg.Pack()
	require.NoError(t, err)

	expectedBytes := []byte{
		0xaa, 0x31, 0x01, 0xc6, 0x1e, 0x36, 0x44, 0x85, 0x27, 0xf0, 0x56, 0x07, 0x10, 0x98, 0x00, 0x0f, 0x42, 0x40,
		0x00, 0x01, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x41, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x1e, 0x36, 0x00, 0x04, 0x00, 0x04, 0x00, 0x03, 0x00, 0x01, 0x56, 0x41, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x56, 0x42, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x56, 0x43, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x49, 0x31, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x41, 0x4e, 0x41, 0x4c, 0x4f, 0x47, 0x31, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x41, 0x4e, 0x41, 0x4c, 0x4f, 0x47, 0x32, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x41, 0x4e,
		0x41, 0x4c, 0x4f, 0x47, 0x33, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x42, 0x52, 0x45, 0x41,
		0x4b, 0x45, 0x52, 0x20, 0x31, 0x20, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x42, 0x52, 0x45, 0x41, 0x4b, 0x45,
		0x52, 0x20, 0x32, 0x20, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x42, 0x52, 0x45, 0x41, 0x4b, 0x45, 0x52, 0x20,
		0x33, 0x20, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x42, 0x52, 0x45, 0x41, 0x4b, 0x45, 0x52, 0x20, 0x34, 0x20,
		0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x42, 0x52, 0x45, 0x41, 0x4b, 0x45, 0x52, 0x20, 0x35, 0x20, 0x53, 0x54,
		0x41, 0x54, 0x55, 0x53, 0x42, 0x52, 0x45, 0x41, 0x4b, 0x45, 0x52, 0x20, 0x36, 0x20, 0x53, 0x54, 0x41, 0x54,
		0x55, 0x53, 0x42, 0x52, 0x45, 0x41, 0x4b, 0x45, 0x52, 0x20, 0x37, 0x20, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
		0x42, 0x52, 0x45, 0x41, 0x4b, 0x45, 0x52, 0x20, 0x38, 0x20, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x42, 0x52,
		0x45, 0x41, 0x4b, 0x45, 0x52, 0x20, 0x39, 0x20, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x42, 0x52, 0x45, 0x41,
		0x4b, 0x45, 0x52, 0x20, 0x41, 0x20, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x42, 0x52, 0x45, 0x41, 0x4b, 0x45,
		0x52, 0x20, 0x42, 0x20, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x42, 0x52, 0x45, 0x41, 0x4b, 0x45, 0x52, 0x20,
		0x43, 0x20, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x42, 0x52, 0x45, 0x41, 0x4b, 0x45, 0x52, 0x20, 0x44, 0x20,
		0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x42, 0x52, 0x45, 0x41, 0x4b, 0x45, 0x52, 0x20, 0x45, 0x20, 0x53, 0x54,
		0x41, 0x54, 0x55, 0x53, 0x42, 0x52, 0x45, 0x41, 0x4b, 0x45, 0x52, 0x20, 0x46, 0x20, 0x53, 0x54, 0x41, 0x54,
		0x55, 0x53, 0x42, 0x52, 0x45, 0x41, 0x4b, 0x45, 0x52, 0x20, 0x47, 0x20, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
		0x00, 0x0d, 0xf8, 0x47, 0x00, 0x0d, 0xf8, 0x47, 0x00, 0x0d, 0xf8, 0x47, 0x01, 0x00, 0xb2, 0xd0, 0x00, 0x00,
		0x00, 0x01, 0x01, 0x00, 0x00, 0x01, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0x16,
		0x00, 0x1e, 0xd5, 0xd1,
	}

	require.Equal(t, expectedBytes, cfgBytes)
}

func TestConfigFrame2_Multistreaming(t *testing.T) {
	// Create ConfigFrame with multistreaming
	cfgm := NewConfigFrame()
	cfgm.IDCode = 7734
	cfgm.TimeBase = 1000000
	cfgm.DataRate = 30

	// Set time - note the FRACSEC difference
	soc := uint32(1149577200)
	cfgm.SetTimeWithQuality(soc, 463000, "-", false, true, 6)

	// Create two identical PMU stations
	for i := 0; i < 2; i++ {
		// data_format: (False, False, True, False)
		station := NewPMUStation("Station A", 7734, false, true, false, false)

		// Add phasors
		station.AddPhasor("VA", 915527, PhunitVoltage)
		station.AddPhasor("VB", 915527, PhunitVoltage)
		station.AddPhasor("VC", 915527, PhunitVoltage)
		station.AddPhasor("I1", 45776, PhunitCurrent)

		// Add analog channels
		station.AddAnalog("ANALOG1", 1, AnunitPow)
		station.AddAnalog("ANALOG2", 1, AnunitRMS)
		station.AddAnalog("ANALOG3", 1, AnunitPeak)

		// Add digital channels
		digitalNames := []string{
			"BREAKER 1 STATUS", "BREAKER 2 STATUS", "BREAKER 3 STATUS", "BREAKER 4 STATUS",
			"BREAKER 5 STATUS", "BREAKER 6 STATUS", "BREAKER 7 STATUS", "BREAKER 8 STATUS",
			"BREAKER 9 STATUS", "BREAKER A STATUS", "BREAKER B STATUS", "BREAKER C STATUS",
			"BREAKER D STATUS", "BREAKER E STATUS", "BREAKER F STATUS", "BREAKER G STATUS",
		}
		station.AddDigital(digitalNames, 0x0000, 0xFFFF)

		// Set remaining parameters
		station.Fnom = FreqNom60Hz // 60 Hz
		station.CfgCnt = 22

		// Add station to configuration
		cfgm.AddPMUStation(station)
	}

	cfgBytes, err := cfgm.Pack()
	require.NoError(t, err)

	// Test that we can unpack the frame
	cfgUnpacked := NewConfigFrame()
	err = cfgUnpacked.Unpack(cfgBytes)
	require.NoError(t, err)

	// Verify the unpacked data
	require.Equal(t, uint16(2), cfgUnpacked.NumPMU)
	require.Equal(t, uint16(7734), cfgUnpacked.IDCode)
	require.Equal(t, uint32(1000000), cfgUnpacked.TimeBase)
	require.Equal(t, int16(30), cfgUnpacked.DataRate)

	// Verify PMU stations
	require.Len(t, cfgUnpacked.PMUStationList, 2)
	for _, pmu := range cfgUnpacked.PMUStationList {
		require.Equal(t, "Station A", strings.TrimSpace(pmu.STN))
		require.Equal(t, uint16(7734), pmu.IDCode)
		require.Equal(t, uint16(4), pmu.Phnmr)
		require.Equal(t, uint16(3), pmu.Annmr)
		require.Equal(t, uint16(1), pmu.Dgnmr)
		require.Equal(t, uint16(22), pmu.CfgCnt)
		require.Equal(t, uint16(FreqNom60Hz), pmu.Fnom)

		// Verify phasor names
		require.Equal(t, "VA", strings.TrimSpace(pmu.CHNAMPhasor[0]))
		require.Equal(t, "VB", strings.TrimSpace(pmu.CHNAMPhasor[1]))
		require.Equal(t, "VC", strings.TrimSpace(pmu.CHNAMPhasor[2]))
		require.Equal(t, "I1", strings.TrimSpace(pmu.CHNAMPhasor[3]))
	}

	expectedBytes := []byte{
		0xaa, 0x31, 0x03, 0x74, 0x1e, 0x36, 0x44, 0x85, 0x27, 0xf0, 0x56, 0x07, 0x10, 0x98, 0x00, 0x0f, 0x42, 0x40, 0x00,
		0x02, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x41, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x1e,
		0x36, 0x00, 0x04, 0x00, 0x04, 0x00, 0x03, 0x00, 0x01, 0x56, 0x41, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x56, 0x42, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x56, 0x43, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x49, 0x31, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x41, 0x4e, 0x41, 0x4c, 0x4f, 0x47, 0x31, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x41,
		0x4e, 0x41, 0x4c, 0x4f, 0x47, 0x32, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x41, 0x4e, 0x41,
		0x4c, 0x4f, 0x47, 0x33, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x42, 0x52, 0x45, 0x41, 0x4b,
		0x45, 0x52, 0x20, 0x31, 0x20, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x42, 0x52, 0x45, 0x41, 0x4b, 0x45, 0x52,
		0x20, 0x32, 0x20, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x42, 0x52, 0x45, 0x41, 0x4b, 0x45, 0x52, 0x20, 0x33,
		0x20, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x42, 0x52, 0x45, 0x41, 0x4b, 0x45, 0x52, 0x20, 0x34, 0x20, 0x53,
		0x54, 0x41, 0x54, 0x55, 0x53, 0x42, 0x52, 0x45, 0x41, 0x4b, 0x45, 0x52, 0x20, 0x35, 0x20, 0x53, 0x54, 0x41,
		0x54, 0x55, 0x53, 0x42, 0x52, 0x45, 0x41, 0x4b, 0x45, 0x52, 0x20, 0x36, 0x20, 0x53, 0x54, 0x41, 0x54, 0x55,
		0x53, 0x42, 0x52, 0x45, 0x41, 0x4b, 0x45, 0x52, 0x20, 0x37, 0x20, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x42,
		0x52, 0x45, 0x41, 0x4b, 0x45, 0x52, 0x20, 0x38, 0x20, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x42, 0x52, 0x45,
		0x41, 0x4b, 0x45, 0x52, 0x20, 0x39, 0x20, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x42, 0x52, 0x45, 0x41, 0x4b,
		0x45, 0x52, 0x20, 0x41, 0x20, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x42, 0x52, 0x45, 0x41, 0x4b, 0x45, 0x52,
		0x20, 0x42, 0x20, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x42, 0x52, 0x45, 0x41, 0x4b, 0x45, 0x52, 0x20, 0x43,
		0x20, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x42, 0x52, 0x45, 0x41, 0x4b, 0x45, 0x52, 0x20, 0x44, 0x20, 0x53,
		0x54, 0x41, 0x54, 0x55, 0x53, 0x42, 0x52, 0x45, 0x41, 0x4b, 0x45, 0x52, 0x20, 0x45, 0x20, 0x53, 0x54, 0x41,
		0x54, 0x55, 0x53, 0x42, 0x52, 0x45, 0x41, 0x4b, 0x45, 0x52, 0x20, 0x46, 0x20, 0x53, 0x54, 0x41, 0x54, 0x55,
		0x53, 0x42, 0x52, 0x45, 0x41, 0x4b, 0x45, 0x52, 0x20, 0x47, 0x20, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x00,
		0x0d, 0xf8, 0x47, 0x00, 0x0d, 0xf8, 0x47, 0x00, 0x0d, 0xf8, 0x47, 0x01, 0x00, 0xb2, 0xd0, 0x00, 0x00, 0x00,
		0x01, 0x01, 0x00, 0x00, 0x01, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0x16, 0x53,
		0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x41, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x1e, 0x36, 0x00,
		0x04, 0x00, 0x04, 0x00, 0x03, 0x00, 0x01, 0x56, 0x41, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x56, 0x42, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x56, 0x43, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x49, 0x31, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x41,
		0x4e, 0x41, 0x4c, 0x4f, 0x47, 0x31, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x41, 0x4e, 0x41,
		0x4c, 0x4f, 0x47, 0x32, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x41, 0x4e, 0x41, 0x4c, 0x4f,
		0x47, 0x33, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x42, 0x52, 0x45, 0x41, 0x4b, 0x45, 0x52,
		0x20, 0x31, 0x20, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x42, 0x52, 0x45, 0x41, 0x4b, 0x45, 0x52, 0x20, 0x32,
		0x20, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x42, 0x52, 0x45, 0x41, 0x4b, 0x45, 0x52, 0x20, 0x33, 0x20, 0x53,
		0x54, 0x41, 0x54, 0x55, 0x53, 0x42, 0x52, 0x45, 0x41, 0x4b, 0x45, 0x52, 0x20, 0x34, 0x20, 0x53, 0x54, 0x41,
		0x54, 0x55, 0x53, 0x42, 0x52, 0x45, 0x41, 0x4b, 0x45, 0x52, 0x20, 0x35, 0x20, 0x53, 0x54, 0x41, 0x54, 0x55,
		0x53, 0x42, 0x52, 0x45, 0x41, 0x4b, 0x45, 0x52, 0x20, 0x36, 0x20, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x42,
		0x52, 0x45, 0x41, 0x4b, 0x45, 0x52, 0x20, 0x37, 0x20, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x42, 0x52, 0x45,
		0x41, 0x4b, 0x45, 0x52, 0x20, 0x38, 0x20, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x42, 0x52, 0x45, 0x41, 0x4b,
		0x45, 0x52, 0x20, 0x39, 0x20, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x42, 0x52, 0x45, 0x41, 0x4b, 0x45, 0x52,
		0x20, 0x41, 0x20, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x42, 0x52, 0x45, 0x41, 0x4b, 0x45, 0x52, 0x20, 0x42,
		0x20, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x42, 0x52, 0x45, 0x41, 0x4b, 0x45, 0x52, 0x20, 0x43, 0x20, 0x53,
		0x54, 0x41, 0x54, 0x55, 0x53, 0x42, 0x52, 0x45, 0x41, 0x4b, 0x45, 0x52, 0x20, 0x44, 0x20, 0x53, 0x54, 0x41,
		0x54, 0x55, 0x53, 0x42, 0x52, 0x45, 0x41, 0x4b, 0x45, 0x52, 0x20, 0x45, 0x20, 0x53, 0x54, 0x41, 0x54, 0x55,
		0x53, 0x42, 0x52, 0x45, 0x41, 0x4b, 0x45, 0x52, 0x20, 0x46, 0x20, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x42,
		0x52, 0x45, 0x41, 0x4b, 0x45, 0x52, 0x20, 0x47, 0x20, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x00, 0x0d, 0xf8,
		0x47, 0x00, 0x0d, 0xf8, 0x47, 0x00, 0x0d, 0xf8, 0x47, 0x01, 0x00, 0xb2, 0xd0, 0x00, 0x00, 0x00, 0x01, 0x01,
		0x00, 0x00, 0x01, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0x16, 0x00, 0x1e, 0x20,
		0xe8,
	}

	require.Equal(t, expectedBytes, cfgBytes)
}
